diff --git a/Sol/Model/pybullet_drone_simulator.py b/Sol/Model/pybullet_drone_simulator.py
index ae99192..d627c9d 100644
--- a/Sol/Model/pybullet_drone_simulator.py
+++ b/Sol/Model/pybullet_drone_simulator.py
@@ -58,9 +58,8 @@ th.autograd.set_detect_anomaly(True)
 
 np.seterr(all="raise")
 
-DEFAULT_GUI = True
+DEFAULT_GUI = False
 DEFAULT_RECORD_VIDEO = False
-DEFAULT_OUTPUT_FOLDER = 'results'
 DEFAULT_COLAB = False
 
 register(
@@ -68,7 +67,7 @@ register(
     id="DroneEnv",
     # path to the class for creating the env
     # Note: entry_point also accept a class as input (and not only a string)
-    entry_point="PBDroneEnv",
+    entry_point="PBDroneSimulator",
     # Max number of steps per episode, using a `TimeLimitWrapper`
     max_episode_steps=3000,
 )
@@ -298,7 +297,7 @@ class PBDroneSimulator:
 
         # eval_env = make_env(multi=False, gui=False, rank=0)
 
-        eval_env = SubprocVecEnv([self.make_env(multi=True, save_model=True, save_path=filename, gui=True,
+        eval_env = SubprocVecEnv([self.make_env(multi=True, save_model=True, save_path=filename, gui=args.gui,
                                                 aviary_dim=np.array([-2, -2, 0, 2, 2, 2])), ])
         # eval_env = SubprocVecEnv([self.make_env(multi=True, gui=False, rank=i) for i in range(self.num_cpu)])
 
@@ -363,7 +362,7 @@ class PBDroneSimulator:
                 tensorboard_log="./logs/SAC_tensorboard/",
                 train_freq=1,
                 gradient_steps=2,
-                buffer_size=int(4e6),
+                buffer_size=int(1e6),
                 learning_rate=1e-3,
                 # gamma=0.95,
                 batch_size=49152 // self.num_cpu,
@@ -496,7 +495,7 @@ def parse_args():
 
     parser = argparse.ArgumentParser()
 
-    parser.add_argument('--gym-id', type=str, default='PBDroneEnv')
+    parser.add_argument('--gym_id', type=str, default='PBDroneEnv')
     parser.add_argument('--run_type', type=str, default='full', choices=["full", "test", "saved", "learning"])
     parser.add_argument('--env-config', type=str, default='default')
     parser.add_argument('--env-kwargs', type=str, default='{}')
@@ -504,7 +503,7 @@ def parse_args():
     parser.add_argument('--seed', '-s', type=int, default=1)
     parser.add_argument('--cuda', action='store_true', default=True)
     parser.add_argument('--gui', default=DEFAULT_GUI, help='Whether to use PyBullet GUI for the eval env'
-                                                           '(default: True)')
+                                                           '(default: False)')
 
     parser.add_argument("--save-run", action="store_true", default=True,)
     parser.add_argument('--save-buffer', action='store_true', default=False)
@@ -554,9 +553,6 @@ def parse_args():
     parser.add_argument("--capture-video", type=lambda x: bool(strtobool(x)), default=False, nargs="?", const=True,
                         help="weather to capture videos of the agent performances (check out `videos` folder)")
 
-    parser.add_argument('--output_folder', default=DEFAULT_OUTPUT_FOLDER, type=str,
-                        help='Folder where to save logs (default: "results")', metavar='')
-
     args = parser.parse_args()
 
     return args
@@ -566,10 +562,10 @@ def init_wandb(args):
     run_name = f"{args.gym_id}__{args.agent}__{int(time.time())}"
     print(f"Starting run {run_name} with `wandb`...")
 
-    wandb.tensorboard.patch(root_logdir=args.wandb_rootlog)
+    # wandb.tensorboard.patch(root_logdir=args.wandb_rootlog)
 
     config = {
-        "env_name": args.env,
+        "env_name": args.gym_id,
         "agent": args.agent,
         "total_timesteps": args.num_steps,
         "env_config": args.env_config,
